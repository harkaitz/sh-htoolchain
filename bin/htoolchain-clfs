#!/bin/sh -e
#L:
#L:  MIT License
#L:  
#l:  Bug reports, feature requests to gemini|https://harkadev.com/oss
#l:  Copyright (c) 2022 Harkaitz Agirre, harkaitz.aguirre@gmail.com
#L:
#L:  Permission is hereby granted, free of charge, to any person obtaining
#L:  a copy of this software and associated documentation files (the
#L:  "Software"), to deal in the Software without restriction, including
#L:  without limitation the rights to use, copy, modify, merge, publish,
#L:  distribute, sublicense, and/or sell copies of the Software, and to
#L:  permit persons to whom the Software is furnished to do so, subject to
#L:  the following conditions:
#L:
#L:  The above copyright notice and this permission notice shall be
#L:  included in all copies or substantial portions of the Software.
#L:
#L:  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#L:  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#L:  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#L:  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#L:  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#L:  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#L:  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##:
#h: Usage: $0 ...
#h:
#h: ... show      : Show configuration.
#h: ... all       : Build the missing parts of the whole toolchain.
#h: ... all-force : Build the whole toolchain.
#h:
#h: ... prefix                        : Install prefix.
#h: ... linux-headers                 : Install Linux kernel headers.
#h: ... pkg-config                    : Install pkg-config.
#h: ... binutils                      : Install linker/assembler/...
#h: ... gmp,mpfr,mpc,isl              : Install GCC dependencies.
#h: ... gcc-basic,glibc,libstdc++,gcc : Install C library and GCC.
#h: ... script                        : Install Environment script.
##:
. htoolchain-util
htoolchain_clfs() {
    local cmd="$1"
    shift
    case "${cmd}" in
        show)      htoolchain_clfs_show_variables            ;;
        all)       htoolchain_clfs_all                       ;;
        all-force) FORCE=y htoolchain_clfs_all               ;;
        prefix|linux-headers|pkg-config|gcc-basic|\
        binutils|gmp|mpfr|mpc|isl|glibc|libstdc++|gcc|script)
            clfs_"`echo "${cmd}" | tr '-' '_' | tr '+' 'p'`" ;;
        *) hlog fatal "Invalid subcommand: ${cmd}."          ;;
    esac
}
htoolchain_clfs_show_variables() {
    htoolchain_util show
    hterm vars               \
          CLFS_TARGET        \
          CLFS_TOOLDIR       \
          CLFS_SYSROOT       \
          CLFS_ENV_SCRIPT    \
          CLFS_GLIBC_MINIMAL \
          FORCE
}
htoolchain_clfs_calc_variables() {
    CLFS_TARGET="${CLFS_TARGET:-x86_64-ht-linux-gnu}"
    CLFS_TOOLDIR="${CLFS_TOOLDIR:-${HTOOLCHAIN_TOOLDIR}}"
    CLFS_SYSROOT="${CLFS_SYSROOT:-${HTOOLCHAIN_TOOLDIR}/${CLFS_TARGET}}"
    CLFS_ENV_SCRIPT="${CLFS_ENV_SCRIPT:-/usr/local/bin/${CLFS_TARGET}-env}"
    CLFS_GLIBC_MINIMAL="${CLFS_GLIBC_MINIMAL:-2.11}"
    GETSRC_FORCE="${GETSRC_FORCE:-${FORCE:+y}}"
}
## -----------------------------------------------------------------------------
htoolchain_clfs_all() {
    hlog info "Started: `date`"
    hlog info "Log to: ${LRUN_LOGDIR}"
    local LRUN_COL1=20 LRUN_COL2=20
    if true;then
        lrun -f clfs_prefix clfs_prefix
    fi 
    if test ! -f "${CLFS_SYSROOT}/include/linux/uuid.h" || test -n "${FORCE}";then
        lrun -f clfs_linux_headers clfs_linux_headers
    fi
    if test ! -f "${CLFS_TOOLDIR}/bin/${CLFS_TARGET}-pkg-config" || test -n "${FORCE}";then
        lrun -f clfs_pkg_config clfs_pkg_config
    fi
    if test ! -f "${CLFS_TOOLDIR}/bin/${CLFS_TARGET}-ld" || test -n "${FORCE}";then
        lrun -f clfs_binutils clfs_binutils
    fi
    if test ! -f "${CLFS_TOOLDIR}/lib/libgmp.a" || test -n "${FORCE}";then
        lrun -f clfs_gmp clfs_gmp
    fi
    if test ! -f "${CLFS_TOOLDIR}/lib/libmpfr.a" || test -n "${FORCE}";then
        lrun -f clfs_mpfr clfs_mpfr
    fi
    if test ! -f "${CLFS_TOOLDIR}/lib/libmpc.a" || test -n "${FORCE}";then
        lrun -f clfs_mpc clfs_mpc
    fi
    if test ! -f "${CLFS_TOOLDIR}/lib/libisl.a" || test -n "${FORCE}";then
        lrun -f clfs_isl clfs_isl 
    fi
    if test ! -f "${CLFS_TOOLDIR}/bin/${CLFS_TARGET}-gcc" || test -n "${FORCE}";then
        lrun -f clfs_gcc_basic clfs_gcc_basic
    fi
    if test ! -f "${CLFS_SYSROOT}/lib/libc.so" || test -n "${FORCE}";then
        lrun -f clfs_glibc clfs_glibc
    fi
    if test ! -f "${CLFS_SYSROOT}/lib/libstdc++.a" || test -n "${FORCE}";then
        lrun -f clfs_libstdcpp clfs_libstdcpp
    fi
    if test ! -f "${CLFS_TOOLDIR}/lib/gcc/${CLFS_TARGET}/full" || test -n "${FORCE}";then
        lrun -f clfs_gcc clfs_gcc
    fi
    if true;then
        lrun -f clfs_script clfs_script
    fi
    hlog info "Finished: `date`"
}
clfs_prefix() {
    htoolchain_util gen-prefix
    vrun mkdir -p                   "${CLFS_SYSROOT}"
    vrun mkdir -p         "`dirname "${CLFS_SYSROOT}/${CLFS_SYSROOT}"`"
    vrun rm -f                      "${CLFS_SYSROOT}/${CLFS_SYSROOT}"
    vrun ln -s    "${CLFS_SYSROOT}" "${CLFS_SYSROOT}/${CLFS_SYSROOT}"
    vrun rm -f                      "${CLFS_SYSROOT}/usr"
    vrun ln -s    "${CLFS_SYSROOT}" "${CLFS_SYSROOT}/usr"
}
clfs_linux_headers() {
    local url="https://www.kernel.org/pub/linux/kernel/v5.x/linux-5.16.9.tar.xz"
    local src="`getsrc_tar "${url}"`" pwd="`pwd`"
    vcd + "${src}"
    vrun make mrproper
    vrun make ARCH=x86_64 headers_check
    vrun make ARCH=x86_64 INSTALL_HDR_PATH="${CLFS_SYSROOT}" headers_install
    vcd - "${pwd}"
}
clfs_pkg_config() {
    local url="http://sourceforge.net/projects/pkgconfiglite/files/0.28-1/pkg-config-lite-0.28-1.tar.gz"
    local src="`getsrc_tar "${url}"`" pwd="`pwd`"
    vcd + "${src}"
    vrun ./configure                         \
         --prefix="${CLFS_TOOLDIR}"          \
         --program-prefix="${CLFS_TARGET}-"  \
         --disable-host-tool                 \
         --with-pc-path="${CLFS_SYSROOT}/lib/pkgconfig:${CLFS_SYSROOT}/lib/pkgconfig"
    vrun make
    vrun make install
    vcd - "${pwd}"
}
clfs_binutils() {
    local url="http://ftp.gnu.org/gnu/binutils/binutils-2.38.tar.bz2"
    local src="`getsrc_tar "${url}"`" pwd="`pwd`"
    vcd + "${src}"
    vrun ./configure                      \
         --prefix="${CLFS_TOOLDIR}"       \
         --target="${CLFS_TARGET}"        \
         --with-sysroot="${CLFS_SYSROOT}" \
         --disable-nls                    \
         --disable-werror                 \
         LDFLAGS="-Wl,-rpath,${CLFS_TOOLDIR}/lib"
    vrun make
    vrun make install
    vcd - "${pwd}"
}
clfs_gmp() {
    local url="http://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.xz"
    local src="`getsrc_tar "${url}"`" pwd="`pwd`"
    vcd + "${src}"
    vrun ./configure --prefix="${CLFS_TOOLDIR}" LDFLAGS="-Wl,-rpath,${CLFS_TOOLDIR}/lib"
    vrun make
    vrun make install
    vcd - "${pwd}"
}
clfs_mpfr() {
    local url="https://www.mpfr.org/mpfr-4.1.0/mpfr-4.1.0.tar.xz"
    local src="`getsrc_tar "${url}"`" pwd="`pwd`"
    vcd + "${src}"
    vrun ./configure                  \
         --prefix="${CLFS_TOOLDIR}"   \
         --with-gmp="${CLFS_TOOLDIR}" \
         LDFLAGS="-Wl,-rpath,${CLFS_TOOLDIR}/lib"
    vrun make
    vrun make install
    vcd - "${pwd}"
}
clfs_mpc() {
    local url="https://ftp.gnu.org/gnu/mpc/mpc-1.2.1.tar.gz"
    local src="`getsrc_tar "${url}"`" pwd="`pwd`"
    vcd + "${src}"
    vrun ./configure                          \
         --prefix="${CLFS_TOOLDIR}"    \
         --with-gmp="${CLFS_TOOLDIR}"  \
         --with-mpfr="${CLFS_TOOLDIR}" \
         LDFLAGS="-Wl,-rpath,${CLFS_TOOLDIR}/lib"
    vrun make
    vrun make install
    vcd - "${pwd}"
}
clfs_isl() {
    local url="http://archive.ubuntu.com/ubuntu/pool/universe/i/isl-0.18/isl-0.18_0.18.orig.tar.xz"
    local src="`getsrc_tar "${url}"`" pwd="`pwd`"
    vcd + "${src}"
    vrun ./configure                         \
         --prefix="${CLFS_TOOLDIR}"          \
         --with-gmp-prefix="${CLFS_TOOLDIR}" \
         LDFLAGS="-Wl,-rpath,${CLFS_TOOLDIR}/lib"
    vrun make
    vrun make install
    vcd - "${pwd}"
}
clfs_gcc_download() {
    local url="https://ftp.gnu.org/gnu/gcc/gcc-11.2.0/gcc-11.2.0.tar.xz"
    local src="`getsrc_tar "${url}"`"
    test -n "${src}"
    if test ! -f "${src}/.p2";then
        sed -i '
        /m64=/s/lib64/lib/
        ' "${src}/gcc/config/i386/t-linux64"
        printf '
        #undef STANDARD_STARTFILE_PREFIX_1
        #define STANDARD_STARTFILE_PREFIX_1 "%s/lib/"
        ' "${CLFS_SYSROOT}" >> "${src}/gcc/config/linux.h"
        printf '
        #undef STANDARD_STARTFILE_PREFIX_2
        #define STANDARD_STARTFILE_PREFIX_2 ""
        ' >> "${src}/gcc/config/linux.h"
        touch "${src}/.p2"
    fi
    echo "${src}"
}
clfs_gcc_basic() {
    local src="`clfs_gcc_download`" pwd="`pwd`"
    test -n "${src}"
    local bas="`basename "${src}"`"
    local tmp="${src}-build-basic"
    rm -rf "${tmp}"
    mkdir -p "${tmp}"
    vcd + "${tmp}"
    vrun "../${bas}/configure"                 \
         --prefix="${CLFS_TOOLDIR}"            \
         --target="${CLFS_TARGET}"             \
         --with-sysroot="${CLFS_SYSROOT}"      \
         --with-local-prefix="${CLFS_TOOLDIR}" \
         --with-native-system-header-dir="${CLFS_TOOLDIR}/include" \
         --with-mpfr="${CLFS_TOOLDIR}"         \
         --with-gmp="${CLFS_TOOLDIR}"          \
         --with-isl="${CLFS_TOOLDIR}"          \
         --with-mpc="${CLFS_TOOLDIR}"          \
         --with-glibc-version="${CLFS_GLIBC_MINIMAL}" \
         --enable-default-pie                         \
         --with-newlib             \
         --without-headers         \
         --enable-initfini-array   \
         --disable-nls             \
         --disable-shared          \
         --disable-multilib        \
         --disable-decimal-float   \
         --disable-threads         \
         --disable-libatomic       \
         --disable-libgomp         \
         --disable-libquadmath     \
         --disable-libssp          \
         --disable-libvtv          \
         --disable-libstdcxx       \
         --enable-languages=c,c++  \
         LDFLAGS="-Wl,-rpath,${CLFS_TOOLDIR}/lib"
    vrun make V=1 -j"${NPROC}" all-gcc all-target-libgcc
    vrun make V=1 -j"${NPROC}" install-gcc install-target-libgcc
    vcd - "${pwd}"
}
clfs_glibc() {
    local url="http://ftp.gnu.org/gnu/glibc/glibc-2.35.tar.xz"
    local src="`getsrc_tar "${url}"`" pwd="`pwd`"
    test -n "${src}"
    local bas="`basename "${src}"`"
    local tmp="${src}-build"
    rm -rf "${tmp}"
    mkdir -p "${tmp}"
    sed -i 's/\\$$(pwd)/`pwd`/' ${src}/timezone/Makefile
    vcd + "${tmp}"
    echo "libc_cv_ssp=no" > config.cache
    vrun env                                      \
         BUILD_CC="gcc"                           \
         CC="${CLFS_TARGET}-gcc -m64"             \
         AR="${CLFS_TARGET}-ar"                   \
         RANLIB="${CLFS_TARGET}-ranlib"           \
         "../${bas}/configure"                    \
         --host="${CLFS_TARGET}"                  \
         --prefix="${CLFS_SYSROOT}"               \
         --enable-kernel=3.12.0                   \
         --with-headers="${CLFS_SYSROOT}/include" \
         --enable-obsolete-rpc                    \
         --disable-werror                         \
         --with-binutils="${CLFS_TOOLDIR}/bin"    \
         --cache-file=config.cache
    vrun make V=1 -j"${NPROC}"
    vrun make V=1 -j"${NPROC}" install
    vcd - "${pwd}"
}
clfs_libstdcpp() {
    local src="`clfs_gcc_download`" pwd="`pwd`"
    test -n "${src}"
    local bas="`basename "${src}"`"
    local tmp="${src}-build-libstdcpp"
    rm -rf "${tmp}"
    mkdir -p "${tmp}"
    vcd + "${tmp}"
    vrun "../${bas}/libstdc++-v3/configure"  \
         --host="${CLFS_TARGET}"             \
         --build="`../${bas}/config.guess`"  \
         --prefix="${CLFS_SYSROOT}"          \
         --disable-multilib                  \
         --disable-nls                       \
         --disable-libstdcxx-pch
    vrun make V=1 -j"${NPROC}" all
    vrun make V=1 -j"${NPROC}" install
    vcd - "${pwd}"
}
clfs_gcc() {
    local src="`clfs_gcc_download`" pwd="`pwd`"
    test -n "${src}"
    local bas="`basename "${src}"`"
    local tmp="${src}-build-full"
    rm -rf "${tmp}"
    mkdir -p "${tmp}"
    vcd + "${tmp}"
    vrun "../${bas}/configure"                        \
         --prefix="${CLFS_TOOLDIR}"                   \
         --target="${CLFS_TARGET}"                    \
         --with-sysroot="${CLFS_SYSROOT}"             \
         --with-local-prefix="${CLFS_TOOLDIR}"        \
         --with-mpfr="${CLFS_TOOLDIR}"                \
         --with-gmp="${CLFS_TOOLDIR}"                 \
         --with-isl="${CLFS_TOOLDIR}"                 \
         --with-mpc="${CLFS_TOOLDIR}"                 \
         --with-glibc-version="${CLFS_GLIBC_MINIMAL}" \
         --enable-initfini-array                      \
         --enable-default-pie                         \
         --disable-nls                                \
         --disable-multilib                           \
         --enable-threads=posix                       \
         --disable-decimal-float                      \
         --disable-libatomic                          \
         --disable-libgomp                            \
         --disable-libquadmath                        \
         --disable-libssp                             \
         --disable-libvtv                             \
         --disable-libstdcxx                          \
         --enable-languages=c,c++                     \
         LDFLAGS="-Wl,-rpath,${CLFS_TOOLDIR}/lib"
    vrun make V=1 -j"${NPROC}" all
    vrun make V=1 -j"${NPROC}" install
    vrun touch "${CLFS_TOOLDIR}/lib/gcc/${CLFS_TARGET}/full"
    vcd - "${pwd}"
}
clfs_script() {
    hlog info "Creating ${CLFS_ENV_SCRIPT} ..."
    sudo tee "${CLFS_ENV_SCRIPT}" <<-EOF >/dev/null
	#!/bin/sh -e
	. hcross-env-c
	hcross_env_c                      \\
	    type=gnu                      \\
	    path="${CLFS_TOOLDIR}/bin"    \\
	    tool_prefix="${CLFS_TARGET}-" \\
	    prefix="${CLFS_SYSROOT}/usr"  \\
	    prefixes="${CLFS_SYSROOT}/usr ${CLFS_SYSROOT}" \\
	    linker="${CLFS_SYSROOT}/lib/ld-linux-x86-64.so.2"
	EOF
    sudo chmod +x "${CLFS_ENV_SCRIPT}"
}
## -----------------------------------------------------------------------------
htoolchain_clfs_calc_variables
hmain -f "htoolchain-clfs" htoolchain_clfs "$@"
