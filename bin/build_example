#!/bin/bash -e
#L:
#L:  MIT License
#L:  
#l:  Bug reports, feature requests to gemini|https://harkadev.com/oss
#l:  Copyright (c) 2022 Harkaitz Agirre, harkaitz.aguirre@gmail.com
#L:
#L:  Permission is hereby granted, free of charge, to any person obtaining
#L:  a copy of this software and associated documentation files (the
#L:  "Software"), to deal in the Software without restriction, including
#L:  without limitation the rights to use, copy, modify, merge, publish,
#L:  distribute, sublicense, and/or sell copies of the Software, and to
#L:  permit persons to whom the Software is furnished to do so, subject to
#L:  the following conditions:
#L:
#L:  The above copyright notice and this permission notice shall be
#L:  included in all copies or substantial portions of the Software.
#L:
#L:  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#L:  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#L:  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#L:  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#L:  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#L:  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#L:  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#::
#h: Usage: hcross [-t TOOLCHAIN] $0 list|all|PACKAGES...
#h:
#h: This is a collection of software taken from `CLFS 3.0.0`. It is
#h: usefull to test the correct functioning of toolchains. By default
#h: the prefix is `/opt/htoolchain`.
#h:
#h: ... list    : List packages.
#h: ... all     : Build all packages.
#h: ... PKG ... : Build selected packages.
#::
. hlog
. vcd
. vrun
. lrun
. getsrc-git
. getsrc-tar
. getsrc-cached
. hautotools
. hgmake
. hmain
main_build_example() {
    # http://www.clfs.org/view/CLFS-3.0.0-SYSVINIT/x86_64-64/temp-system/chapter.html
    local p= pkgs='
    gmp         mpfr         mpc            isl
    cloog       zlib         binutils       ncurses
    bash        bzip2        check          coreutils
    diffutils   file         findutils      gawk
    gettext     grep         gzip           make
    patch       sed          tar            texinfo
    util_linux  xz           gdbm           shadow
    attr        acl          which          m4
    openssl1    wget         groff          mg
    zstd        readline     tcl            expect
    curl        libtiff      expat          libuv
    gperf       libcap       inetutils      bc
    libpcap     giflib       libjpeg_turbo  tinyalsa
    jemalloc    autoconf     automake       bison
    ninja       pkg_config   less           libzip
    libsoxr     libtsm       bcg729         yajl
    libicu      pcre         libsrtp        procps
    psmisc      libffi       libpipeline    libspeexdsp
    rlwrap      libev        libevent       whitedb
    libjwt      libpng       libupnp        libsndfile
    libdb       libxml2      libtool
    '
    local fails_freebsd='
    cloog       ncurses      findutils      texinfo
    util_linux  shadow       attr           acl
    expect      libcap       tinyalsa       pkg_config
    libicu      procps       psmisc         libffi
    rlwrap      whitedb      libupnp        ninja
    libtsm      libsrtp
    '
    
    if test @"${HBUILD_TOOLCHAIN:-native}" = @"native";then
        export HBUILD_PREFIX="${HTOOLCHAIN_TOOLDIR}"
    fi
    case "${HBUILD_TOOLCHAIN:-native}" in
        *-freebsd*) local LRUN_SKIP="${LRUN_SKIP} ${fails_freebsd}";;
    esac
    local cmd="${1}"
    shift
    case "${cmd}" in
        list) printf '%s\n\n' "${pkgs}"
              ;;
        all)  local LRUN_COL1=15 LRUN_COL2=15
              for p in ${pkgs};do
                  lrun -lf "${p}" "build_${p}" || true
              done
              ;;
        *)    for p in "${cmd}" "$@";do
                  build_"${p}"
              done
              ;;
    esac
}



## -----------------------------------------------------------------------------
build_gmp() {
    local v="6.2.1" "$@" pwd="`pwd`"
    local url="http://ftp.gnu.org/gnu/gmp/gmp-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    export CC_FOR_BUILD=gcc
    hautotools all --with-pic ${HBUILD_PREFER_STATIC:+--disable-shared}
    unset CC_FOR_BUILD
    vcd - "${pwd}"
}
build_mpfr() {
    local v=4.1.0 "$@" pwd="`pwd`"
    local url="https://www.mpfr.org/mpfr-${v}/mpfr-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all --with-pic ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_mpc() {
    local v=1.2.1 "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/mpc/mpc-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`" 
    vcd + "${src}"
    hautotools all --with-pic ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_isl() {
    local v="0.18" "$@" pwd="`pwd`"
    local url="http://archive.ubuntu.com/ubuntu/pool/universe/i/isl-${v}/isl-${v}_${v}.orig.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all --with-pic ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_cloog() {
    local v=0.18.2 "$@" pwd="`pwd`"
    local url="http://www.bastoul.net/cloog/pages/download/cloog-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`" 
    vcd + "${src}"
    hautotools clean
    hautotools configure --with-pic
    sed -i '/cmake/d' Makefile
    hautotools make
    hautotools install
    vcd - "${pwd}"
}
build_zlib() {
    local v=1.2.11 "$@" pwd="`pwd`"
    local url="https://zlib.net/zlib-${v}.tar.xz"
    local pre="${HBUILD_DESTDIR}${HBUILD_PREFIX:-/usr/local}"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    env CC="${CC:-gcc} -fpic ${CPPFLAGS}" LD="${LD:-gcc}" ./configure --prefix="${pre}"
    make static  SHAREDLIBV=
    make install SHAREDLIBV=
    vcd - "${pwd}"
}
build_binutils() {
    local v="2.38" "$@" pwd="`pwd`"
    local url="http://ftp.gnu.org/gnu/binutils/binutils-${v}.tar.bz2"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools clean
    rm -rf "../binutils-build"
    mkdir -v "../binutils-build"
    vcd + "../binutils-build"
    CONFIGURE="${src}/configure" \
             hautotools all      \
             --disable-nls       \
             --enable-shared     \
             --enable-64-bit-bfd \
             --disable-multilib
    vcd - "${pwd}"
}
build_ncurses() {
    local v="6.3" "$@" pwd="`pwd`"
    local url="https://invisible-mirror.net/archives/ncurses/ncurses-${v}.tar.gz"
    local pre="${HBUILD_DESTDIR}${HBUILD_PREFIX:-/usr/local}"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    sed -i 's/mawk//' configure
    hautotools clean
    hautotools configure                    \
               --with-manpage-format=normal \
               --with-shared                \
               --without-debug              \
               --without-ada                \
               --without-normal             \
               --with-termlib               \
               --disable-stripping          \
               --enable-overwrite           \
               --enable-widec               \
               --with-build-cc=gcc
    hautotools make
    hautotools install
    ${HBUILD_SUDO:-env} rm -f ${pre}/lib/libcurses.so ${pre}/lib/libtinfo.so
    ${HBUILD_SUDO:-env} ln -s libncursesw.so ${pre}/lib/libcurses.so
    ${HBUILD_SUDO:-env} ln -s libtinfow.so   ${pre}/lib/libtinfo.so
    
    vcd - "${pwd}"
}
build_bash() {
    local v="5.1.16" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/bash/bash-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    cat > config.cache <<-EOF
	ac_cv_func_mmap_fixed_mapped=yes
	ac_cv_func_strcoll_works=yes
	ac_cv_func_working_mktime=yes
	bash_cv_func_sigsetjmp=present
	bash_cv_getcwd_malloc=yes
	bash_cv_job_control_missing=present
	bash_cv_printf_a_format=yes
	bash_cv_sys_named_pipes=present
	bash_cv_ulimit_maxfds=yes
	bash_cv_under_sys_siglist=yes
	bash_cv_unusable_rtsigs=no
	gt_cv_int_divbyzero_sigfpe=yes
	EOF
    hautotools all --without-bash-malloc --cache-file=config.cache
    vcd - "${pwd}"
}
build_bzip2() {
    local v="1.0.8" "$@" pwd="`pwd`"
    local url="https://www.sourceware.org/pub/bzip2/bzip2-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    make clean
    cp -v Makefile Makefile.orig
    sed -e '/^all/s/ test$//' Makefile.orig > Makefile
    make CC="${CC:-gcc} -fPIC" AR="${AR:-ar}" RANLIB="${RANLIB:-ranlib}"
    make PREFIX="${HBUILD_DESTDIR}${HBUILD_PREFIX:-/usr/local}" install
    vcd - "${pwd}"
}
build_check() {
    local v="0.15.2" "$@" pwd="`pwd`"
    local url="https://github.com/libcheck/check/releases/download/${v}/check-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_coreutils() {
    local v="9.0" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/coreutils/coreutils-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    cat > config.cache <<-EOF
	fu_cv_sys_stat_statfs2_bsize=yes
	gl_cv_func_working_mkstemp=yes
	EOF
    hautotools all --enable-install-program=hostname --cache-file=config.cache
    vcd - "${pwd}"
}
build_diffutils() {
    local v="3.8" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/diffutils/diffutils-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    cat > config.cache <<-EOF
	gl_cv_func_wcwidth_works=yes
	ac_cv_func_fnmatch_gnu=yes
	EOF
    hautotools all --cache-file=config.cache
    vcd - "${pwd}"
}
build_file() {
    local v="5.41" "$@" pwd="`pwd`"
    local url="https://astron.com/pub/file/file-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools clean
    hautotools configure --disable-shared
    hautotools make
    hautotools install FILE_COMPILE="`which file`"
    vcd - "${pwd}"
}
build_findutils() {
    local v="4.9.0" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/findutils/findutils-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    cat > config.cache <<-EOF
	gl_cv_func_wcwidth_works=yes
	ac_cv_func_fnmatch_gnu=yes
	EOF
    hautotools all --cache-file=config.cache
    vcd - "${pwd}"
}
build_gawk() {
    local v=5.1.1 "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/gawk/gawk-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    sed -i 's/extras//' Makefile.in
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_gettext() {
    local v="0.21" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/gettext/gettext-${v}.tar.xz"
    local pre="${HBUILD_DESTDIR}${HBUILD_PREFIX:-/usr/local}"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    cat > config.cache <<-EOF
	gl_cv_func_wcwidth_works=yes
	EOF
    hautotools clean
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared} --cache-file=config.cache
    mkdir -p "${pre}/bin"
    #cp -v src/msgfmt "${pre}/bin"
    vcd - "${pwd}"    
}
build_grep() {
    local v="3.7" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/grep/grep-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    case "${HBUILD_TOOLCHAIN}" in
        native|*-linux-gnu)
            hautotools all --without-included-regex `: regex.h in glibc`
            ;;
        *)  hautotools all
            ;;
    esac
    vcd - "${pwd}"
}
build_gzip() {
    local v=1.11 "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/gzip/gzip-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_make() {
    local v=4.3 "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/make/make-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    test -n "${src}"
    vcd + "${src}"
    hautotools all --without-guile
    vcd - "${pwd}"
}
build_patch() {
    local v="2.7.6" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/patch/patch-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_sed() {
    local v="4.8" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/sed/sed-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_tar() {
    local v=1.34 "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/tar/tar-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    cat > config.cache <<- EOF
	gl_cv_func_wcwidth_works=yes
	gl_cv_func_btowc_eof=yes
	ac_cv_func_malloc_0_nonnull=yes
	gl_cv_func_mbrtowc_incomplete_state=yes
	gl_cv_func_mbrtowc_nul_retval=yes
	gl_cv_func_mbrtowc_null_arg1=yes
	gl_cv_func_mbrtowc_null_arg2=yes
	gl_cv_func_mbrtowc_retval=yes
	gl_cv_func_wcrtomb_retval=yes
	EOF
    hautotools all --cache-file=config.cache
    vcd - "${pwd}"
}
build_texinfo() {
    local v="6.8" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/texinfo/texinfo-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    PERL="`which perl`" hautotools all
    vcd - "${pwd}"
}
build_util_linux() {
    local v1="2.24" v2="2" GETSRC_FORCE=y "$@" pwd="`pwd`"
    local url="http://www.kernel.org/pub/linux/utils/util-linux/v${v1}/util-linux-${v1}.${v2}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    local CPPFLAGS="${CPPFLAGS} -D_GNU_SOURCE -include sys/sysmacros.h"
    hautotools all                          \
               --disable-makeinstall-chown  \
               --disable-makeinstall-setuid \
               --disable-login    \
               --disable-asciidoc \
               --disable-nologin  \
               --without-python   \
               --enable-libblkid  \
               --enable-blkid     \
               --without-ncurses  \
               --disable-more     \
               ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_xz() {
    local v="5.2.5" "$@" pwd="`pwd`"
    local url="https://tukaani.org/xz/xz-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_gdbm() {
    local v="1.23" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/gdbm/gdbm-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    local CC="${CC:-gcc} -Wno-macro-redefined -Wno-return-type"
    hautotools all              \
               --disable-shared \
               --enable-static  \
               --enable-libgdbm-compat
    vcd - "${pwd}"
}
build_shadow() {
    local v="4.11.1" "$@" pwd="`pwd`"
    local url="https://github.com/shadow-maint/shadow/releases/download/v${v}/shadow-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools autogen
    hautotools all             \
               --enable-man    \
               --disable-rpath \
               --enable-static \
               --disable-shared
    vcd - "${pwd}"
}
build_attr() {
    local v="2.5.1" "$@" pwd="`pwd`"
    local url="https://download.savannah.gnu.org/releases/attr/attr-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_acl() {
    local v="2.3.1" "$@" pwd="`pwd`"
    local url="https://download.savannah.gnu.org/releases/acl/acl-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_which() {
    local v="2.21" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/which/which-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_m4() {
    local v="1.4.19" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/m4/m4-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_openssl1() {
    local v="1.1.0i" "$@" pwd="`pwd`"
    local url="https://openssl.org/source/openssl-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    case "${HBUILD_TOOLCHAIN:-native}" in
        native)            local targets="linux-x86_64"          ;;
        *android*)         local targets="android"               ;;
        arm*)              local targets="linux-generic32"       ;;
        x86_64-*-mingw32)  local targets="mingw64"               ;;
        i686-*-mingw32)    local targets="mingw"                 ;;
        x86_64*linux-gnu)  local targets="linux-x86_64"          ;;
        x86_64*linux-musl) local targets="no-async linux-x86_64" ;;
        x86_64*freebsd*)   local targets="BSD-x86_64"            ;;
        i*-linux*)         local targets="linux-x32"             ;;
        *)                 hlog fatal "Unsupported platform."    ;;
    esac
    vrun make distclean || true
    vrun ./Configure -static ${targets} -fpic --prefix="${HBUILD_PREFIX:-/usr/local}"
    vrun make
    vrun ${HBUILD_SUDO:-env} make install DESTDIR="${HBUILD_DESTDIR}"
    vcd - "${pwd}"
}
build_wget() {
    local v="1.20.3" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/wget/wget-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all --with-ssl=openssl
    vcd - "${pwd}"
}
build_groff() {
    local v="1.22.4" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/groff/groff-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all --with-doc=no
    vcd - "${pwd}"
}
build_mg() {
    local v="v3.4" "$@" pwd="`pwd`"
    local url="https://github.com/troglobit/mg.git,${v}"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    hautotools autogen
    CFLAGS="-fcommon" hautotools all
    vcd - "${pwd}"
}
build_zstd() {
    local v="1.5.2" "$@" pwd="`pwd`"
    local url="https://github.com/facebook/zstd/releases/download/v${v}/zstd-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    make SHAREDLIBV= \
         CC="${CC:-gcc} -fpic ${CPPFLAGS}" \
         LD="${LD:-gcc}"                   \
         prefix="${HBUILD_DESTDIR}${HBUILD_PREFIX:-/usr/local}"
    make install SHAREDLIBV= \
         CC="${CC:-gcc} -fpic ${CPPFLAGS}" \
         LD="${LD:-gcc}"                   \
         prefix="${HBUILD_DESTDIR}${HBUILD_PREFIX:-/usr/local}"
    vcd - "${pwd}"
}
build_readline() {
    local v="8.1.2" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/readline/readline-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    sed -i '/MV.*old/d' Makefile.in
    sed -i '/{OLDSUFF}/c:' support/shlib-install
    hautotools clean
    hautotools configure --disable-static --with-curses
    hautotools make    SHLIB_LIBS="-lncursesw"
    hautotools install SHLIB_LIBS="-lncursesw"
    vcd - "${pwd}"
}
build_tcl() {
    local v="8.6.12" "$@" pwd="`pwd`";
    local url="https://downloads.sourceforge.net/tcl/tcl${v}-src.tar.gz"
    local src="`getsrc_tar "${url}"`"
    test -n "${src}"
    vcd + "${src}/unix"
    hautotools all
    vcd - "${pwd}"
}
build_flex() {
    local v="2.6.4" "$@" pwd="`pwd`"
    local url="https://github.com/westes/flex/releases/download/v${v}/flex-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${src}"
}
build_expect() {
    local v="5.45.4" "$@" pwd="`pwd`"
    local url="https://prdownloads.sourceforge.net/expect/expect${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    case "${HBUILD_TOOLCHAIN}" in
        *-linux-musl)
            local t="`echo "${HBUILD_TOOLCHAIN}" | sed 's|musl|gnu|'`"
            hautotools all --enable-shared --host="${t}"
            ;;
        *)
            hautotools all --enable-shared
            ;;
    esac
    vcd - "${pwd}"
}
build_curl() {
    local v="7.73.0" "$@" pwd="`pwd`"
    local url="https://curl.haxx.se/download/curl-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools clean
    hautotools configure                   \
               --disable-shared            \
               --enable-static             \
               --enable-threaded-resolver  \
               --with-ca-path=/etc/ssl/certs
    find . -iname Makefile -exec sed -i 's|-[IL]opt[^ ]*||g' '{}' ';'
    hautotools make
    hautotools install
    vcd - "${pwd}"
}
build_libtiff() {
    local v="4.1.0" "$@" pwd="`pwd`"
    local url="https://download.osgeo.org/libtiff/tiff-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    local pre="${HBUILD_DESTDIR}${HBUILD_PREFIX:-/usr/local}"
    vcd + "${src}"
    hautotools autogen
    hautotools all --disable-shared
    ${HBUILD_SUDO:-sudo} sed -i '
    /^Libs:.*/s|.*|Libs: -L${libdir} -ltiff -llzma -ljpeg -lz -lm|
    ' "${pre}/lib/pkgconfig/libtiff-4.pc"
    vcd - "${pwd}"
}
build_expat() {
    local v="2.4.6" "$@" pwd="`pwd`"
    local url="https://prdownloads.sourceforge.net/expat/expat-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_libuv() {
    local v=1.38.1 "$@" pwd="`pwd`"
    local url="https://dist.libuv.org/dist/v${v}/libuv-v${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    local pre="${HBUILD_DESTDIR}${HBUILD_PREFIX:-/usr/local}"
    vcd + "${src}"
    hcmake all
    if test -f "${pre}/lib/libuv_a.a";then
        vrun cp "${pre}/lib/libuv_a.a" "${pre}/lib/libuv.a"
    fi
    vcd - "${pwd}"
}
build_gperf() {
    local v="3.1" "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/gperf/gperf-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_libcap() {
    local v="2.63" "$@" pwd="`pwd`"
    local url="https://www.kernel.org/pub/linux/libs/security/linux-privs/libcap2/libcap-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    local LD="${CC:-gcc} -shared"
    vcd + "${src}"
    hgmake clean
    hgmake all prefix="${HBUILD_DESTDIR}${HBUILD_PREFIX:-/usr/local}" install
    vcd - "${pwd}"
}
build_inetutils() {
    local v="1.9.4" v="2.2" "$@" pwd="`pwd`"
    local url="http://ftp.gnu.org/gnu/inetutils/inetutils-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    if ! grep 'define PATH_PROCNET_DEV' ifconfig/system/linux.h >/dev/null 2>&1;then
        echo '#define PATH_PROCNET_DEV "/proc/net/dev"' >> ifconfig/system/linux.h
    fi
    hautotools all                  \
               --localstatedir=/var \
               --disable-logger     \
               --disable-whois      \
               --disable-rcp        \
               --disable-rexec      \
               --disable-rlogin     \
               --disable-talk       \
               --disable-rsh        \
               --disable-servers
    vcd - "${pwd}"
}
build_bc() {
    local v="1.06" "$@" pwd="`pwd`"
    local url="http://ftp.gnu.org/gnu/bc/bc-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_libpcap() {
    local pwd="`pwd`"
    local url="https://github.com/the-tcpdump-group/libpcap.git"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_giflib() {
    local v="5.2.1" "$@" pwd="`pwd`"
    local url="https://sourceforge.net/projects/giflib/files/giflib-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    make clean
    make V=1                            \
         CC="${CC:-gcc}"                \
         OFLAGS="${CFLAGS} ${CPPFLAGS}" \
         LDFLAGS="${LDFLAGS}"
    make V=1 install                    \
         DESTDIR="${HBUILD_DESTDIR}"        \
         PREFIX="${HBUILD_PREFIX:-/usr/local}"
    vcd - "${pwd}"
}
build_libjpeg_turbo() {
    local v="2.0.6" "$@" pwd="`pwd`"
    local url="https://sourceforge.net/projects/libjpeg-turbo/files/${v}/libjpeg-turbo-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hcmake all -DWITH_SIMD=no -DENABLE_SHARED=no # -DCMAKE_SYSTEM_PROCESSOR=x86_64
    vcd - "${pwd}"
}
build_tinyalsa() {
    local url="https://github.com/tinyalsa/tinyalsa.git"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    vcd + "src"
    make CROSS_COMPILE="${HBUILD_TOOLCHAIN:+${HBUILD_TOOLCHAIN}-}"     \
         LDFLAGS="${CFLAGS} ${CPPFLAGS}"                               \
         WARNINGS="${CFLAGS} ${CPPFLAGS} -Wall -Wextra -Wfatal-errors" \
         DESTDIR="${HBUILD_DESTDIR}"                                   \
         PREFIX="${HBUILD_PREFIX:-/usr/local}"                         \
         all install
    vcd - ".."
    vcd + "utils"
    make CROSS_COMPILE="${HBUILD_TOOLCHAIN:+${HBUILD_TOOLCHAIN}-}"             \
         LDFLAGS="-static ${CFLAGS} ${CPPFLAGS}"                               \
         WARNINGS="-static ${CFLAGS} ${CPPFLAGS} -Wall -Wextra -Wfatal-errors" \
         DESTDIR="${HBUILD_DESTDIR}"                                           \
         PREFIX="${HBUILD_PREFIX:-/usr/local}"                                 \
         all install
    vcd - ".."
    vcd - "${pwd}"
}
build_jemalloc() {
    local v="5.2.1" "$@" pwd="`pwd`"
    local url="https://github.com/jemalloc/jemalloc,${v}"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    autoconf
    hautotools all                        \
               --disable-cxx              \
               --with-version=5.1.0-0-g0  \
               --with-lg-quantum=3        \
               --with-jemalloc-prefix=je_ \
               --enable-cc-silence
    vcd - "${pwd}"
}
build_autoconf() {
    local v=2.71 "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/autoconf/autoconf-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_automake() {
    local v=1.16.5 "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/automake/automake-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_bison() {
    local v=3.8.2 "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/bison/bison-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_ninja() {
    local v=1.10.2 "$@" pwd="`pwd`"
    local url="https://github.com/ninja-build/ninja/archive/v${v}/ninja-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hcmake all
    vcd - "${pwd}"
}
build_pkg_config() {
    local v=0.29.2 "$@" pwd="`pwd`"
    local url="https://pkg-config.freedesktop.org/releases/pkg-config-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_less() {
    local v=590 "$@" pwd="`pwd`"
    local url="https://www.greenwoodsoftware.com/less/less-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_libzip() {
    local v=1.5.1 "$@" pwd="`pwd`"
    local url="https://libzip.org/download/libzip-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    test -n "${src}"
    vcd + "${src}"
    hcmake all
    vcd - "${pwd}"
}
build_libsoxr() {
    local v=0.1.3 "$@" pwd="`pwd`"
    local url="https://sourceforge.net/projects/soxr/files/soxr-${v}-Source.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hcmake all
    vcd - "${pwd}"
}
build_libtsm() {
    local v=v4.0.1 "$@" pwd="`pwd`"
    local url="https://github.com/Aetf/libtsm.git,${v}"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    hcmake all
    vcd - "${pwd}"
}
build_bcg729() {
    local v=master "$@" pwd="`pwd`"
    local url="https://github.com/Linphone-sync/bcg729.git,${v}"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    hcmake all
    vcd - "${pwd}"
}
build_yajl() {
    local v=master "$@" pwd="`pwd`"
    local url="https://github.com/lloyd/yajl,${v}"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    hcmake all
    vcd - "${pwd}"
}
build_libicu() {
    local v= "$@" pwd="`pwd`"
    local url="https://github.com/unicode-org/icu.git,${v}"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    vcd + "icu4c/source"
    hautotools all              \
               --enable-static  \
               --disable-shared \
               --disable-tools  \
               --disable-extras \
               --disable-samples
    vcd - "../.."
    vcd - "${pwd}"
}
build_pcre() {
    local v=8.45 "$@" pwd="`pwd`"
    local url="https://sourceforge.net/projects/pcre/files/pcre/${v}/pcre-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all --disable-pcretest-libreadline --disable-shared
    vcd - "${pwd}"
}
build_libsrtp() {
    local v=v2.2.0 "$@" pwd="`pwd`"
    local url="https://github.com/cisco/libsrtp.git,${v}"
    local src="`getsrc_git "${url}"`";
    vcd + "${src}"
    hautotools all --enable-openssl
    vcd - "${pwd}"
}
build_procps() {
    local v=3.3.17 "$@" pwd="`pwd`"
    local url="https://sourceforge.net/projects/procps-ng/files/Production/procps-ng-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all                              \
               --enable-static                  \
               --disable-shared                 \
               --disable-kill                   \
               --without-ncurses                \
               ac_cv_func_malloc_0_nonnull=yes  \
               ac_cv_func_realloc_0_nonnull=yes \
               LIBS=-ltinfo                     \
               CPPFLAGS="-include langinfo.h -include utmp.h"
    vcd - "${pwd}"
}
build_psmisc() {
    local v=23.4 "$@" pwd="`pwd`"
    local url="https://sourceforge.net/projects/psmisc/files/psmisc/psmisc-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all                              \
               ac_cv_func_malloc_0_nonnull=yes  \
               ac_cv_func_realloc_0_nonnull=yes
    vcd - "${pwd}"
}
build_libffi() {
    local v=3.4.2 "$@" pwd="`pwd`"
    local url="https://github.com/libffi/libffi/releases/download/v${v}/libffi-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    sed -e '/^includesdir/ s/$(libdir).*$/$(includedir)/' \
        -i include/Makefile.in
    sed -e '/^includedir/ s/=.*$/=@includedir@/' \
        -e 's/^Cflags: -I${includedir}/Cflags:/' \
        -i libffi.pc.in
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_libpipeline() {
    local v=1.5.5 "$@" pwd="`pwd`"
    local url="https://download.savannah.gnu.org/releases/libpipeline/libpipeline-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_libspeexdsp() {
    local v=1.2rc3 "$@" pwd="`pwd`"
    local url="http://downloads.xiph.org/releases/speex/speexdsp-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all 
    vcd - "${pwd}"
}
build_rlwrap() {
    local v=v0.42 "$@" pwd="`pwd`"
    local url="https://github.com/hanslub42/rlwrap.git,${v}"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    hautotools autogen
    hautotools all 
    vcd - "${pwd}"
}
build_libev() {
    local v=master "$@" pwd="`pwd`"
    local url="https://github.com/BeeswaxIO/libev.git,${v}"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    hautotools all
    vcd - "${pwd}"
}
build_libevent() {
    local v=2.1.12 "$@" pwd="`pwd`"
    local url="https://github.com/libevent/libevent/releases/download/"
    local url="${url}/release-${v}-stable/libevent-${v}-stable.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_whitedb() {
    local v=v0.7.2 "$@" pwd="`pwd`"
    local url="https://github.com/priitj/whitedb.git,${v}"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    sed -i '/compare_and_swap/s|inline||g' Db/dblock.h Db/dblock.c
    sh ./Bootstrap
    hautotools clean
    hautotools configure --enable-static --disable-shared
    hautotools make
    hautotools install
    vcd - "${pwd}"
}
build_jansson() {
    local v="2.10" "$@" pwd="`pwd`"
    local url="https://github.com/akheron/jansson.git,${v}"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    hcmake all
    vcd - "${pwd}"
}
build_libjwt() {
    local v=v1.9.0 "$@" pwd="`pwd`"
    local url="https://github.com/benmcollins/libjwt.git,${v}"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    hautotools autogen
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_libpng() {
    local v=1.6.37 pwd="`pwd`"
    local url="https://sourceforge.net/projects/libpng/files/libpng16/${v}/libpng-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_libupnp() {
    local v=1.14.0 "$@" pwd="`pwd`"
    local url="https://sourceforge.net/projects/pupnp/files/pupnp/libupnp-${v}/libupnp-${v}.tar.bz2"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_libsndfile() {
    local v=1.0.28 "$@" pwd="`pwd`"
    local url="http://www.mega-nerd.com/libsndfile/files/libsndfile-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
build_libdb() {
    local v=18.1.40 "$@" pwd="`pwd`"
    local url="https://fossies.org/linux/misc/db-${v}.tar.gz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    vcd + "build_unix"
    local CONFIGURE=../dist/configure
    local MAKE_INSTALL_TARGET=install_lib
    hautotools all --enable-compat185 --enable-dbm --enable-cxx
    vcd - ".."
    vcd - "${pwd}"
}
build_libxml2() {
    local v=v2.9.10 "$@" pwd="`pwd`"
    local url="https://github.com/GNOME/libxml2.git,${v}"
    local src="`getsrc_git "${url}"`"
    vcd + "${src}"
    test ! -f Makefile || make distclean
    autoreconf -fi
    local CONFIGURE=./autogen.sh
    hautotools all --disable-shared --without-python --without-zlib --without-lzma 
    vcd - "${pwd}"
}
build_libtool() {
    local v=2.4.6 "$@" pwd="`pwd`"
    local url="https://ftp.gnu.org/gnu/libtool/libtool-${v}.tar.xz"
    local src="`getsrc_tar "${url}"`"
    vcd + "${src}"
    hautotools all ${HBUILD_PREFER_STATIC:+--disable-shared}
    vcd - "${pwd}"
}
## -----------------------------------------------------------------------------
hmain -f "build_example" main_build_example "$@"
