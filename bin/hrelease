#!/bin/sh -e
##:
#h: Usage: hrelease [-V][-t TOOLCHAIN,...][-N NAME][-R VER] { -s | COMMAND }
#h:
#h: This program creates releases of a project with hdeploy(1), the generated
#h: files can be listed with "-s". The generated output list can be saved in
#h: a file with "-o".
#h:
#h: You can place the following in your makefile:
#h:
#h:   TOOLCHAINS=x86_64-linux-musl aarch64-linux-musl x86_64-w64-mingw32
#h:   release:
#h:       mkdir -p $(BUILDDIR)
#h:       hrelease -t "$(TOOLCHAINS)" -N $(PROJECT) -R $(VERSION) -o $(BUILDDIR)/Release
#h:       gh release create v$(VERSION) $$(cat $(BUILDDIR)/Release)
#h:
#h: Environment variables: HBUILD_RELEASE_DIR
##:
. htriplet
hrelease() {
    local OPTIND=1 optopt toolchain archives= toolchains= name=
    local version= list= output="${HRELEASE_OUTPUT}" remote=
    local url= version_var=V envs= append=
    
    ## Parse command line arguments.
    while getopts "Vt:N:R:o:sE:e:" optopt; do
        case $optopt in
            V)     echo "HBUILD_RELEASE_DIR: ${HBUILD_RELEASE_DIR}"; return 0;;
            t)     toolchains="${toolchains} $(echo "${OPTARG}" | tr ',' ' ')";;
            N)     name="${OPTARG}";;
            R)     version="${OPTARG}";;
            o)     output="${OPTARG}";;
            s)     list="y";;
            E)     version_var="${OPTARG}";;
            e)     envs="${envs} ${OPTARG}";;
            \?)    return 1;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    
    ## Get name and version.
    if test ! -n "${name}"; then
        echo >&2 "error: Please specify a name. (-N)"
        return 1
    elif test ! -n "${version}"; then
        echo >&2 "error: Please specify a version. (-R)"
        return 1
    fi
    
    ## For each toolchain.
    for toolchain in ${toolchains}; do
        local machine system format prefix basename archive
        htriplet "${toolchain}"
        machine="$( htriplet -m "${toolchain}")"
        system="$(  htriplet -s "${toolchain}")"
        format="$(  htriplet -z "${toolchain}")"; test -n "${format}"
        prefix="$(  htriplet -p "${toolchain}")"; test -n "${prefix}"
        basename="${name}-${version}${system:+_${system}}${machine:+_${machine}}"
        archive="${HBUILD_RELEASE_DIR}/${basename}${format}"
        archives="${archives} ${archive}"
        if test -n "${list}"; then
            if test ! -f "${archive}"; then
                echo >&2 "error: ${archive}: Not found."
                return 1
            fi
            echo "${archive}"
            continue
        fi
        mkdir -p "${HBUILD_RELEASE_DIR}"
        env UNAME_S="${system}"           \
            "${version_var}"="${version}" \
            ${envs}                       \
            hdeploy -t "${toolchain}" -p "${prefix}" -o "${archive}" "$@"
        case "${archive}" in
            *.zip)
                env \
                    UNAME_S="${system}"           \
                    "${version_var}"="${version}" \
                    ${envs}                       \
                    hdeploy -t "${toolchain}" -p "${prefix}" -o "${archive%.zip}.tar.gz" "$@"
                archives="${archives} ${archive%.zip}.tar.gz"
                ;;
        esac
    done
    
    ## Save list.
    if test -n "${output}"; then
        echo "Creating ${output} ..."
        for archive in ${archives}; do
            echo "${archive}"
        done | tee ${HRELEASE_OUTPUT:+ -a } "${output}"
    fi
    
}
## -------------------------------------------------------------------
HBUILD_RELEASE_DIR="${HBUILD_RELEASE_DIR:-${HOME}/.Releases}"
if test @"${SCRNAME:-$(basename "$0")}" = @"hrelease"; then
    case "${1}" in
        ''|-h|--help) sed -n 's/^ *#h: \{0,1\}//p' "$0";;
        *)            hrelease "$@"; exit 0;;
    esac
fi
